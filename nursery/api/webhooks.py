from __future__ import annotations

"""
Owner-scoped API for managing webhooks (endpoints and deliveries).

Surfaces
--------
- `WebhookEndpointViewSet` (CRUD):
    * Manage HTTPS callback URLs per user.
    * Secrets are **write-only**; responses expose only `secret_last4`.
    * Event types accept either an explicit list or `"*"` (all).
- `WebhookDeliveryViewSet` (read-only):
    * Inspect queued/succeeded/failed deliveries generated by the worker.
    * No create/update/delete over the API.

Security & tenancy
------------------
- `IsAuthenticated + IsOwner` guard all endpoints; querysets are owner-scoped by
  the shared `OwnedModelViewSet`.
- HTTPS is enforced for endpoint URLs when `WEBHOOKS_REQUIRE_HTTPS=True`
  (default in production; see settings).
- Secrets are never returned in API responses; only the last 4 characters are
  displayed for operator sanity checks.
- Delivery responses may include response headers/body from remote endpoints; the
  model controls what is persisted. We expose these fields **read-only**.

Concurrency & workers
---------------------
- This module only manages configuration and read-only delivery inspection.
  Actual delivery enqueuing is done via `core.utils.webhooks.enqueue_for_user`
  and processed by the `deliver_webhooks` management command (see signals.py
  and worker code). Keeping delivery I/O out of request/response cycles ensures
  low latency and predictable error handling.

Throttling
----------
- No dedicated scope here; global `user` throttles apply. Adjust via DRF
  settings if your deployment requires stricter limits.
"""

import secrets
from typing import List

from django.conf import settings
from django.utils import timezone
from rest_framework import viewsets, mixins, serializers, status
from rest_framework.permissions import IsAuthenticated
from rest_framework.response import Response
from drf_spectacular.utils import extend_schema, OpenApiParameter

from core.permissions import IsOwner
from nursery.models import (
    WebhookEndpoint,
    WebhookDelivery,
    WebhookEventType,
    WebhookDeliveryStatus,
)
from .viewsets import OwnedModelViewSet


# ------------------------------- Serializers ----------------------------------


class WebhookEndpointSerializer(serializers.ModelSerializer):
    """
    Serializer for configuring a webhook endpoint.

    Fields:
        - secret (write-only): Raw signing secret; never returned on read.
        - secret_last4 (read-only): Last 4 chars of the stored secret for display.
        - event_types: List of allowed event keys, or ["*"] for all.

    Validation:
        - URL must be HTTPS when `WEBHOOKS_REQUIRE_HTTPS` is True (prod default).
        - Unknown event types are rejected (keeps tenants from subscribing to
          typos/nonexistent events).
    """
    # secret is write-only; expose only last4 on reads
    secret = serializers.CharField(write_only=True, required=True, max_length=128)
    secret_last4 = serializers.CharField(read_only=True)

    class Meta:
        model = WebhookEndpoint
        fields = [
            "id",
            "name",
            "url",
            "event_types",
            "is_active",
            "secret",
            "secret_last4",
            "created_at",
            "updated_at",
            "user",
        ]
        read_only_fields = ["id", "created_at", "updated_at", "user", "secret_last4"]

    def validate_url(self, value: str) -> str:
        """
        Enforce HTTPS in environments that require it.

        SECURITY:
            Prevents accidental configuration of insecure endpoints in production.
            Local development may allow http based on settings.
        """
        require_https = getattr(settings, "WEBHOOKS_REQUIRE_HTTPS", not settings.DEBUG)
        if require_https and not value.lower().startswith("https://"):
            raise serializers.ValidationError("HTTPS is required for webhooks in this environment.")
        return value

    def validate_event_types(self, value: List[str]) -> List[str]:
        """
        Validate the subscription list.

        Rules:
            - Empty list -> subscribe to none (allowed).
            - Contains "*" -> normalized to ["*"] (all events).
            - Otherwise all values must be in `WebhookEventType.choices`.
        """
        if not value:
            return value  # empty = all (no restriction at serializer layer)
        if "*" in value:
            return ["*"]  # normalize
        valid = {c for c, _ in WebhookEventType.choices}
        invalid = [v for v in value if v not in valid]
        if invalid:
            raise serializers.ValidationError(f"Unknown event type(s): {invalid}")
        return value

    def create(self, validated_data):
        """
        Create endpoint for the current user.

        NOTE:
            We set `user` explicitly here rather than relying on `perform_create`
            to avoid surprises if a caller reuses this serializer outside our
            viewset. The last4 is derived from the provided secret by the model.
        """
        # SECURITY: tie the endpoint to the authenticated tenant.
        ep = WebhookEndpoint(**validated_data)
        ep.user = self.context["request"].user
        ep.full_clean()
        ep.save()
        return ep

    def update(self, instance, validated_data):
        """
        Update mutable fields and rotate secret when provided.

        Side effects:
            - If a new `secret` is provided, updates both `secret` and `secret_last4`.
        """
        # If secret provided, rotate it; other fields updated as-is.
        secret = validated_data.pop("secret", None)
        for attr, val in validated_data.items():
            setattr(instance, attr, val)
        if secret is not None:
            # SECURITY: rotate secret atomically with last4 for consistency.
            instance.secret = secret
            instance.secret_last4 = secret[-4:]
        instance.full_clean()
        instance.save()
        return instance


class WebhookDeliverySerializer(serializers.ModelSerializer):
    """
    Read-only serializer for delivery attempts.

    Includes:
        - endpoint_url (denormalized for convenience),
        - response metadata (status/headers/body) when available,
        - scheduling fields (next_attempt_at) for worker introspection.
    """
    endpoint_url = serializers.CharField(source="endpoint.url", read_only=True)

    class Meta:
        model = WebhookDelivery
        fields = [
            "id",
            "endpoint",
            "endpoint_url",
            "event_type",
            "payload",
            "status",
            "attempt_count",
            "last_attempt_at",
            "next_attempt_at",
            "response_status",
            "response_headers",
            "response_body",
            "last_error",
            "request_duration_ms",
            "created_at",
            "updated_at",
            "user",
        ]
        read_only_fields = fields


# -------------------------------- ViewSets ------------------------------------


@extend_schema(tags=["Webhooks"])
class WebhookEndpointViewSet(OwnedModelViewSet):
    """
    CRUD for the current user's webhook endpoints.

    Permissions:
        - `IsAuthenticated` + `IsOwner` scope the queryset to the tenant.

    Filtering/ordering:
        - filterset: `is_active`
        - search: `name`, `url`
        - ordering: created/updated/name
    """
    permission_classes = [IsAuthenticated, IsOwner]
    serializer_class = WebhookEndpointSerializer
    queryset = WebhookEndpoint.objects.all()
    filterset_fields = ["is_active"]
    search_fields = ["name", "url"]
    ordering_fields = ["created_at", "updated_at", "name"]
    ordering = ["-created_at"]


@extend_schema(tags=["Webhooks"])
class WebhookDeliveryViewSet(OwnedModelViewSet):
    """
    Read-only access to delivery attempts for the current user.

    Notes:
        - No create/update/delete via API; deliveries are created by the worker.
        - `select_related("endpoint")` avoids N+1 on listing.
        - Consider server-side pagination if this list grows large (already
          handled by DRF defaults).
    """
    permission_classes = [IsAuthenticated, IsOwner]
    serializer_class = WebhookDeliverySerializer
    queryset = WebhookDelivery.objects.select_related("endpoint").all()
    filterset_fields = ["status", "event_type", "endpoint"]
    search_fields = []
    ordering_fields = ["created_at", "last_attempt_at", "next_attempt_at", "status", "attempt_count"]
    ordering = ["-created_at"]
    http_method_names = ["get", "head", "options"]
